// search.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"



// 선형/순차 검색
int linearSearch(int In[], int num) {
	int a;

	for (int a = 0; a < 10; a++) {
		if (In[a] == num) {			// 찾음..
			return a;				// 찾은 위치를 반환..
		}
	}
	return -1; // 못 찾음..
}

// 이진 탐색
int binarySearch(int In[], int left, int right, int num) {

	int mid = (left + right) / 2;
	printf(" left %d mid %d right %d In[%d] num %d\n",
		left, mid, right, In[mid], num);

	if (left > right) {
		return -1;					// 찾지 못함.
	}
	else if (In[mid] == num) {		// 찾음
		return mid;
	}
	else if (In[mid] < num) {	// 찾고 싶은 수가 큰쪽/오른쪽에 위치함
		binarySearch(In, mid + 1, right, num);	// 재귀 함수 호출
	}
	else if (In[mid] > num) {	// 찾고 싶은 수가 작은쪽/왼쪽에 위치함
		binarySearch(In, left, mid - 1, num);	// 재귀 함수 호출
	}
	else {
		return -1;
	}
}



// 이진 트리를 만들고
void binaryTree(int In[], int Out[]) {
	int a;
	int par;	// par 부모위치

	Out[1] = In[0]; 
	for (a = 1; a < 10; a++) {	// 배열에 있는 10개의 데이터를 이진 트리로 만들기
		par = 1; 
		// int arr[10] = { 50, 30, 70, 10, 100, 20, 60, 90, 40, 80 };
		printf("\n a %d par %d Out %d Int %d \n", a, par, Out[par], In[a]);
		while (Out[par] != 0) { //배열에 값이 없는 (0) 자리를 찾아가는 과정, 빈 자리에 값을 넣어야 됨

			if (In[a] < Out[par]) {	// 배열에 있는 값이 트리에 있는 값보다 작을 때 왼쪽 트리로
				printf(" 작은쪽 ");
				par = par * 2; //작은 쪽을 부모로 설정
			}
			else { // if (In[a] > Out[par]) {					// 배열에 있는 값이 트리에 있는 값보다 크때 오른쪽 트리로
				printf(" 큰쪽 ");
				par = par * 2 + 1; //큰 쪽을 부모로 설정
			}
		}
		Out[par] = In[a]; //빈공간에 값을 입력
	}
}

// 이진 탐색 트리
int binarySearchTree(int In[], int num) {
	// to do...
	int a = 1;
	for (a = 1; a < 1024; ) {
		if (In[a] == num) {
			return a; 
		}
		else if (In[a] < num) {
			a = a * 2 + 1; //찾고 싶은 숫자가 지금 a에 있는 숫자보다 크면 오른쪽으로 이동
		}
		else {
			a = a * 2; //찾고 싶은 숫자가 지금 a에 있는 숫자보다 작으면 왼쪽으로 이동
		}
	}

	return -1; //찾지 못함...
}


int main(void) {

	int num;
	int index;
	// int arr[10] = { 10,20,30,40,50,60,70,80,90,100 };
	int arr[10] = { 50, 30, 70, 10, 100, 20, 60, 90, 40, 80 };
	//int arr[10] = { 10,9,8,7,6,5,4,3,2,1 };
	int res[1024] = { 0, };		// 데이터가 10개 있을 때 이진 트리의 최대 크기

	printf(" 찾고 싶은 숫자 ? ");
	scanf_s("%d", &num);

	// 이진트리에서 찾기
	binaryTree(arr, res);
	for (int a = 0; a < 100; a++) {
		printf(" %d ", res[a]);
	}
	index = binarySearchTree(res, num); // 입력 데이터, 트리 구성, 찾고 싶은 숫자
	if (index >= 0) {
		printf(" 찾고자 하는 숫자는 %d 위치에 있습니다 \n", index);
	}
	else {
		printf(" 찾고자 하는 숫자가 없습니다 \n");
	}
	return 0;

	index = binarySearch(arr, 0, 9, num); // ( 배열, 왼쪽위치, 오른쪽위, 찾고싶은수)
	if (index > -1) {
		printf(" 찾고자 하는 숫자는 %d 번째 위치에 있습니다. \n", index + 1);
	}
	else {
		printf(" 찾고자 하는 숫자가 없습니다. \n");
	}

	return 0;

	// 배열에서 num 찾기..
	index = linearSearch(arr, num);
	if (index > -1) {
		printf(" 찾고자 하는 숫자는 %d 번째 위치에 있습니다. \n", index);
	}
	else {
		printf(" 찾고자 하는 숫자가 없습니다. \n");
	}
	

	//(linearSearch(arr, num) > -1 ) ? () : () ;
	((index = linearSearch(arr, num)) > -1)
		? printf(" 찾고자 하는 숫자는 %d 번째 위치에 있습니다. \n", index + 1)
		: printf(" 찾고자 하는 숫자가 없습니다. \n");

	return 0;
}