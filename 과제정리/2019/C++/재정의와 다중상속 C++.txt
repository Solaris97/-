class Car {
protected:
	int Hp = 100;
public:
	void view()
	{
		cout << "아버지 = " << Hp << endl;
	}

};

class Taxi :public Car {
	int Hp; //Hp란 변수에 값을 넣을 때 자식에 따로 선언되지않았으면 값이 저장될 곳이 없어 부모에 저장 이 경우엔 Hp를 선언해줘서 300값을 자식 Hp에 저장됨. 이게 선언되지않았으면 재정의가 아님.
public:
	void view() 
		/* 이름이 같을 때는 자식의 우선순위가 더 높음. , 재정의는 함수의 이름,변환형,매개 변수의 개수와 데이터 타입이 일치해야됨 즉 void view가 아닌 int view등으로 형식이 바뀌면 재정의가 성립되지않음
		이런 경우에는 중복정의라고 함*/
	{
		Hp = 300; 
		
		Car::view();
		
		cout << "자식 = " << Hp << endl;
	}
};

void main()
{
	Taxi c;
	c.view();
<-----------------------------------------------------------------------------------------재정의------------------------------------------------------------------------------------------->




#include <iostream>
using namespace std;

class A {
public:
	void view()
	{
		cout << "A의 뷰 입니다." << endl;
	}

};


class B {
public:
	void view()
	{
		cout << "B의 프린터 입니다." << endl;
	}

};

class Child :public A, public B {
public:
};



void main()
{
	Child c;
	c.A::view();
}

<------------------------------------------------------------------------------------다중상속--------------------------------------------------------------------------------------------------->